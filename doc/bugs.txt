BUGS
----

Critical:

  - Add a "check mandatory payment" parameters hook to the
    get_checkout_form() processing!

  - The payment state is not stored anywhere, there is no proper hooks
    for that.

  - When requesting checkout forms a check for currencies must be
    done, ie the payment's currency must match with one of the
    supported currencies. Basically that is already done, but there is
    no exception raised.

  - We would need to have somehow stored what are the mandatory
    parameters for a payment method. When the checkout form is
    requested, those should be checked.

  - Parameter massaging is done in a rather horribly ad hoc way,
    should formalize and clean that up.

PayPal:

  - Form posting to PayPal works, but processing of return and notify
    URLs is not yet done. The processor is not yet usable as it is.

Other:

  - Are the merchant secrets versioned? Do we need to store the
    version of the secret as part of the merchant parameters instead
    of keeping it as a fixed value as is done now. Check this from the
    vendor docs. (With some processors, eg Nordea, this is the case.)

  - Once this stuff is a bit more mature, the repository needs quite a
    bit of cleaning up.

  - The get_forms() methods do not return real Django forms, but only a
    dict. Should refactor so that in templates only form.render is
    necessary.

  - No support for the payment button images has been implemented.

  - No need to reinvent the wheel for auditing. Simply use Python's
    logging to write audit entries.

  - There is no good need for having mandatory and optional parameters
    for the Payment object. Eg, with the "luottokunta" interface the
    "Customer_ID" is optional. We can have that as optional parameter
    for the Payment.

  - Need to have customization for the amount. We always ask the
    amount in the format "42.00", but some processors want to have
    comma separated, instead ("42,00"). This should be a parameter for
    the processor module.

  - Each processing module could indicate which hooks it wants to be
    called. And then it could register hooks. So we could share hook
    implementations between classes without doing subclassing. Would
    be much more flexible and powerful that way.

  - Processing module hooks could define which parameters they need
    the processing module to have defined. That way we can validate
    the modules somewhat automatically.

  - Can't set multiple sets of merchant credentials for one specific
    payment processor in one installation. Doesn't work if you wanted
    to use this code in a hosted, multi-tenant webshop scenario. Not
    sure if that is a design goal, though.
